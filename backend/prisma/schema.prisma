// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cart      Cart[]
  order     Order[]
  product   Product[]

  @@map("user")
}

model Order {
  id            Int         @id @default(autoincrement())
  priceTotal    Int
  orderStatus   String
  paymentStatus String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderitem     OrderItem[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int

  @@map("order")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  quantity  Int
  image     String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orderitem")
}

model Product {
  id        Int         @id @default(autoincrement())
  name      String
  image     String
  desc      String      @map("description")
  quantity  Int
  price     Decimal
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  cartitem  CartItem[]
  orderitem OrderItem[]
  User      User?       @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("product")
}

model Cart {
  id        Int        @id @default(autoincrement())
  updatedAt DateTime   @updatedAt
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]

  @@map("cart")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart?    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int?

  @@map("cartitem")
}
